[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mrpro"
version = "0.0.1"
description = "MR image reconstruction and processing package specifically developed for PyTorch."
readme = "README.md"
requires-python = ">=3.11,<3.14"
license = { file = "LICENSE" }
keywords = ["MRI, reconstruction, processing, PyTorch"]
authors = [
    { name = "Christoph Kolbitsch", email = "christoph.kolbitsch@ptb.de" },
    { name = "Patrick Schuenke", email = "patrick.schuenke@ptb.de" },
    { name = "Felix Zimmermann", email = "felix.zimmermann89@ptb.de" },
    { name = "David Schote", email = "david.schote@ptb.de" },
    { name = "Sherine Brahma", email = "sherine.brahma@ptb.de" },
    { name = "Mara Guastini", email = "mara.guastini@ptb.de" },
    { name = "Johannes Hammacher", email = "johannnes.hammacher@ptb.de" },
    { name = "Stefan Martin", email = "stefan.martin@ptb.de" },
    { name = "Andreas Kofler", email = "andreas.kofler@ptb.de" },
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
]
dependencies = [
    "numpy>=1.23,<2.0",
    "torch>=2.2,<3.0",
    "ismrmrd",
    "xsdata>=22.2,<23",
    "einops",
    "pydicom",
    "pypulseq@git+https://github.com/imr-framework/pypulseq",
    "torchkbnufft>=1.4.0",
]

[project.optional-dependencies]
test = [
    "coverage",
    "codecov",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-xdist",
]
lint = ["mypy", "flake8", "isort", "pre-commit", "autopep8", "pydocstyle"]
docs = ["sphinx", "pydata-sphinx-theme", "sphinx-pyproject"]
notebook = [
    "zenodo_get",
    "ipykernel",
    "ipywidgets",
    "jupytext",
    "matplotlib",
    "pip-tools",
]

[project.urls]
"repository" = "https://github.com/PTB-MR/mrpro"

# PyTest section
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]
# addopts = "-n auto" # TODO: debug vscode missing tests if enabled
markers = ["cuda : Tests only to be run when cuda device is available"]

# MyPy section
[tool.mypy]
warn_return_any = false
check_untyped_defs = true
warn_no_return = true
warn_unreachable = true
exclude = ["docs"]
enable_error_code = ["ignore-without-code"]
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["ismrmrd.*", "h5py", "scipy.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 120
extend-exclude = ["__init__.py"]
exclude = ["docs/**"]

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM", # flake8-commas
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    # "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "UP",  # pyupgrade
    "PIE", # flake8-pie
    # "PL",  # PyLint
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]
extend-select = [
    "ANN001", #  type annotation for function argument
    "ANN201", #  return type annonation public function
    "ANN205", #  return type annonation static method
    "ANN401", #  any type annotation
    "BLE001", #  blind exception
    "D417",   #  undocumented-parameter
]
ignore = [
    "N999",   # invalid module name
    "COM812", #  missing-trailing-comma (conflict with formatter)
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = false

[tool.typos.default]
locale = "en-us"

[tool.typos.default.extend-words]
Reson = "Reson" # required for Proc. Intl. Soc. Mag. Reson. Med.

[tool.coverage.paths]
source = ["src", "*/site-packages"]
