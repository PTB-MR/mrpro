name: PyTest

on:
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  get_dockerfiles:
    name: "Get list of dockerfiles for different containers"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mrpro repo
        uses: actions/checkout@v4

      - id: set-matrix
        run: |
          cd ./docker/
          ls
          dockerfiles=$(ls Dockerfile_* | jq -R -s -c 'split("\n")[:-1]')
          echo $dockerfiles
          imagenames=($(ls Dockerfile_*))
          imagenames=${imagenames[@]/Dockerfile_/ghcr.io/ptb-mr/mrpro_}
          echo $imagenames
          echo "dockerfiles=$dockerfiles" >> $GITHUB_OUTPUT
          echo "imagenames=$imagenames" >> $GITHUB_OUTPUT

      - name: Dockerfile overview
        run: |
          echo ${{ steps.set-matrix.outputs.dockerfiles }}
          echo ${{ steps.set-matrix.outputs.imagenames }}
    outputs:
      dockerfiles: ${{ steps.set-matrix.outputs.dockerfiles }}
      imagenames: ${{ steps.set-matrix.outputs.imagenames }}

  push:
    needs: get_dockerfiles
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.get_dockerfiles.outputs.dockerfiles) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create image name
        id: image_name
        run: |
          dockerfile=${{ matrix.dockerfile }}
          echo "image_name=${dockerfile/Dockerfile_/ghcr.io/ptb-mr/mrpro_}" >> $GITHUB_OUTPUT

      - name: Login to GitHub Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ptb-mr
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.image_name.outputs.image_name }}

  test:
    needs: [get_dockerfiles, push]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    strategy:
      matrix:
        imagename: ${{ fromJson(needs.get_dockerfiles.outputs.imagenames) }}
    # runs within Docker container
    container:
      image: ${{ matrix.imagename }}:latest
      options: --user runner

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: python -m pip install .[test]

      - name: Install pytest-github-actions-annotate-failures plugin
        run: pip install pytest-github-actions-annotate-failures

      - name: Run PyTest
        run: |
          pytest -n 4 -m "not cuda" --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=mrpro | tee pytest-coverage.txt

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.51
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 48e334a10caf60e6708d7c712e56d241
          filename: coverage.json
          label: Coverage Report
          message: ${{ steps.coverageComment.outputs.coverage }}
          color: ${{ steps.coverageComment.outputs.color }}
          namedLogo: python

      - name: Set pipeline status
        if: steps.coverageComment.outputs.errors != 0 || steps.coverageComment.outputs.failures != 0
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('PyTest workflow failed with ${{ steps.coverageComment.outputs.errors }} errors and ${{ steps.coverageComment.outputs.failures }} failures.')

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

  # Cancel in-progress runs when a new workflow with the same group name is triggered
  cancel-in-progress: true
