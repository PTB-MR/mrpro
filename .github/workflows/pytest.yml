name: PyTest

on:
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  use_api1:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request GET \
          --url "https://api.github.com/orgs/ptb-mr/packages?package_type=container" \
          --header "Authorization: Bearer $GH_TOKEN"

  use_api:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/ptb-mr/packages?package_type=container"

  get_dockerfiles:
    name: "Get list of dockerfiles for different containers"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mrpro repo
        uses: actions/checkout@v4

      - name: List images
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /orgs/ptb-mr/packages?package_type=container

      - name: Get available images
        run: |
          export GHCR_TOKEN=$(echo $GITHUB_TOKEN | base64)
          curl -H "Authorization: Bearer $GHCR_TOKEN" https://ghcr.io/v2/ptb-mr/mrpro_py311/tags/list
          curl -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${GHCR_TOKEN}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/orgs/ptb-mr/packages?package_type=container"

      - id: set-matrix
        run: |
          cd ./docker/
          ls
          dockerfiles=$(ls Dockerfile_* | jq -R -s -c 'split("\n")[:-1]')
          echo $dockerfiles
          echo "dockerfiles=$dockerfiles" >> $GITHUB_OUTPUT
          imagenames=$(ls Dockerfile_* | sed -e 's/Dockerfile_/ghcr.io\/ptb-mr\/mrpro_/' | jq -R -s -c 'split("\n")[:-1]')
          echo $imagenames
          echo "imagenames=$imagenames" >> $GITHUB_OUTPUT

      - name: Dockerfile overview
        run: |
          echo ${{ steps.set-matrix.outputs.dockerfiles }}
          echo ${{ steps.set-matrix.outputs.imagenames }}
    outputs:
      dockerfiles: ${{ steps.set-matrix.outputs.dockerfiles }}
      imagenames: ${{ steps.set-matrix.outputs.imagenames }}

  test:
    name: "Run tests and get coverage report"
    needs: get_dockerfiles
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    strategy:
      matrix:
        imagename: ${{ fromJson(needs.get_dockerfiles.outputs.imagenames) }}
    # runs within Docker container
    container:
      image: ${{ matrix.imagename }}:latest
      options: --user runner

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: python -m pip install --upgrade --upgrade-strategy "eager" .[test]

      - name: Install pytest-github-actions-annotate-failures plugin
        run: pip install pytest-github-actions-annotate-failures

      - name: Run PyTest
        run: |
          pytest -n 4 -m "not cuda" --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=mrpro | tee pytest-coverage.txt

      - name: Pytest coverage comment
        id: coverageComment
        uses: MishaKav/pytest-coverage-comment@v1.1.51
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml

      - name: Create the Badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 48e334a10caf60e6708d7c712e56d241
          filename: coverage.json
          label: Coverage Report
          message: ${{ steps.coverageComment.outputs.coverage }}
          color: ${{ steps.coverageComment.outputs.color }}
          namedLogo: python

      - name: Set pipeline status
        if: steps.coverageComment.outputs.errors != 0 || steps.coverageComment.outputs.failures != 0
        uses: actions/github-script@v7
        with:
          script: |
            core.setFailed('PyTest workflow failed with ${{ steps.coverageComment.outputs.errors }} errors and ${{ steps.coverageComment.outputs.failures }} failures.')

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}

  # Cancel in-progress runs when a new workflow with the same group name is triggered
  cancel-in-progress: true
